# -*- coding: utf-8 -*-
"""Copy of HW4 - Data Structure & Function (II).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6fvI2MN2wIGdQ76Wxr1IO3EwzIaBPWI

# Homework Assignment #4 (50 points)

This assignment will contain three parts; you are free to pick any questions you want to complete. (The additional points you earn will be treated as bonus points.): 
- Part I (25 pts): Review the syntax that I introduced in the class as well as Lab scripts; you can write in a function style or a program
- Part II (25 pts): Write a function to solve problems
- Part III (25 pts): Challenging problem, you can treat it as bonus problem, mainly for very advanced students.

## Part I (30 pts):

### Q1: **List Exercise (8 pts)**

1a. **Guest list (2 pts)**

If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you'd like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.

In other words, 
- you need to create a list including at least three people (**1 pt**). 
- you need to call your list to print a message to each person, inviting them to dinner (**1 pts**).
"""

list = ["Elon Musk", "Kanye West", "Ernest Hemmingway"]

def invitations(guests):
  for i in range(len(list)):
    print("Hello, " + list[i] + ". " + "You are invited to a dinner tonight!")

invitations(list)

"""1b. **Changing Guest List (2 pts)**

You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite.

- Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting (**1 pt**).
- Print a second set of invitation messages, one for each person who is still on your list (**1 pt**).
"""

list[2] = "Thomas Edison"
invitations(list)

"""1c. **More guests (1 pt)**

You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. 
(Hint: use ``.append()`` to add one new guest to the end of your list. Or check your lab3 scripts, to add three new guests together).
"""

list.append("Justin Bieber")
list.append("Rihanna")
list.append("Beyoncé")
print(list)

"""1d. **Shrinking Guest List (4 pts)**

You just found out that your new dinner table won't arrive in time for the dinner, and you have space for only two guests. 
- Use ``.pop()`` to remove guests from your list one at a time until only two names remain in your list (**1 pt**). 
- Each time you pop a name from your list, print a message to that person letting them know you're sorry you can't invite them to diner (**1 pt**).
- Print a message to each of the two people still on your list, letting them know they're still invited (**1 pt**).
- Use ``len()`` to print a message indicating the number of people you are inviting to dinner (**1 pt**).

"""

#Remove 4 names from list
for i in range(len(list)):
  if len(list)<=2:
    break
  else:
    a = list.pop()
    print("Hello, " + a + ". " + "You are invited to a dinner tonight!") 

#  list.pop()
#  list.pop("Justin Bieber")
#  list.pop("Rihanna")
#  list.pop("Beyoncé")
#  print("Hello, " + list[i] + ". " + "You are disinvited to dinner tonight.")

shrink(list)

"""### Q2. **Seeing the World (8 pts)**

Think of at least five places in the world you'd like to visit.
- Store the locations in a list. Make sure the list is not in alphabetical order (**1 pt**). 
- Print your list in its original order (**1 pt**). 
- Use ``sorted()`` to print your list in alphabetical order without modifying the actual list (**1 pt**).
- Show that your list is still in its original order by printing it (**1 pt**). 
- Use ``sorted()`` to print your list in reverse alphabetical order without changing the order of the original list (**1 pt**) (Hint: check your Lab3 scripts, how to have a reverse order).
- Show that your list is still in its original order by printing it again (**1 pt**).
- Use ``sort()`` to change your list, so it's stored in alphabetical order. Print the list to show that its order has been changed (**1 pt**).
- use ``sort()`` to change your list, so it's stored in reverse alphabetical order. Print the list to show that its order has changed (**1 pt**).
"""

#Original List
locations = ["Singapore", "Monte Carlo", "Barcelona", "Seoul", "Mumbai"]
print("Original List: " + str(locations))

locations = ["Singapore", "Monte Carlo", "Barcelona", "Seoul", "Mumbai"]

#Sorted alphabetical List 
print("Sorted List: " + str(sorted(locations)))
#Original List
print("Original List: " + str(locations))

#Reverse alphabetical order
reverse = sorted(locations, reverse = True)
print("Reverse Order: " + str(reverse))
#Original List
print("Original list: " + str(locations))

#Sort function
locations.sort()
print("Sorted List: " + str(locations))

#Reverse sort order
locations.sort(reverse = True)
print("Reverse Order: " + str(locations))

"""### Q3. **Buffet (3 pts)**

A buffet-style restaurant offers only five basic foods. 
- Think of five simple foods, and store them in a tuple (**1 pt**).
- Use a ``for`` loop to print each food the restarurant offers (**2 pts**).
"""

foods = ("Hamburger", "Pizza", "Sandwich", "Hot Dog", "Ice Cream")
for i in foods:
  print(i)

"""### Q4. **String Exercise (6 pts)**

What is your favourity quote? Think of a quote containing at least five words.  
- Display each word forward (**2 pts**)
- Display each word backward (**4 pts**)

For example,

my quote is, "***Learning to code is learning to create and innovate.***"

The expected output looks like:
``` python
Out[1]: 'Learning', 'to', 'code', 'is', 'learning', 'to', 'create', 'and', 'innovate.'
Out[2]: 'innovate.', 'and', 'create', 'to', 'learning', 'is', 'code', 'to', 'Learning' 
```
"""

quote = "Life is like riding a bicycle. To keep your balance you must keep moving."
#Print forwards
forwards = quote.split()
print(forwards)

#Print backwards
print(quote[::-1])

"""## Part II (25 pts)

### Q1. **Write ``combo_string(s1, s2)`` (5 pts)**

Given 2 strings, s1 and s2, return a string of the form short + long+ short, with the shorter string on the outside and the longer string on the inside. The strings will not be same length, but they may be empty. 

```python
In [1]: combo_string('Hello', 'hi')
Out[1]: 'hiHellohi'

In [2]: combo_string('hi', 'Hello')
Out[2]: 'hiHellohi'

In [3]: combo_string('aaa', 'b')
Out[3]: 'baaab'
```
"""

def combo_string(s1, s2):
  if len(s1) < len(s2):
    return s1+s2+s1
  else:
    return s2+s1+s2

combo_string('Hello', 'hi')

combo_string('hi', 'Hello')

combo_string('aaa', 'b')

"""### Q5. **write ``same_first_last(l)`` (5 pts)**

Given an list of integers, return True if the array is length 1 or more, and the first element and the last element are equal. 

Example:
```python
In [1]: same_first_last([1, 2, 3])
Out[1]: False

In [2]: same_first_last([1, 2, 3, 1)]
Out[2]: True

In [3]: same_first_last([1, 2, 1])
Out[3]: True
```
"""

def same_first_last(array):
  if len(array) >= 1 & array[0] == array[-1]:
    return True
  else:
    return False

same_first_last([1, 2, 3])

same_first_last([1, 2, 3, 1])

same_first_last([1, 2, 1])

"""### Q3. **Write ``cigar_party(cigars, is_weekend)`` (5 pts)**

When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no lower and upper bound on the number of cigars. Return True if the party with the given values is successful, or False otherwise.

Hint:
One approach begins with 
```python
if is_weekend:
  ...
else:
  ...
```
In each section, check cigars with ``>=``, ``<=`` etc. to return true if cigars is in range or else return False. 

For example:
```python
In [1]: cigar_party(30, False)
Out[1]: False

In [2]: cigar_party(50, False)
Out[2]: True

In [3]: cigar_party(70, True)
Out[3]: True
```
"""

def cigar_party(cigars, is_weekend):
  if is_weekend:
    weekend = True
    return True
  else:
    cigars in range(40, 60)
    return True

cigar_party(30, False)

cigar_party(50, False)

cigar_party(70, True)

"""### Q4. **Write ``date_fashion(you, date)`` (5 pts)**

You and your date are trying to get a table at a restaurant. The parameter "you" is the stylishness of your clothes, in the range 0...10, and "date" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0 = no, 1=maby, 2 = yes. 
- If either of your is very stylish, 8 or more, then the result is 2 (yes). 
- with the exception that if either of you has style of 2 or less, then the result is 0 (no). 
- Otherwise the result is 1 (maybe).

Hint: one solution uses the pattern
```python
if xxx:
  return 0
elif yyy:
  return 2
else:
  return 1
```
where xxx and yyy compute with ``<=``, ``>=`` if the you/date numbers get that result. The order of the if statements is significant -- the 0 result case takes precedence over the other cases, so that if statement comes first. 


Example:
``` python
In [1]: date_fashion(5, 10)
Out[1]: 2

In [2]: date_fashion(5, 2)
Out[2]: 0

In [3]: date_fashion(5, 5)
Out[3]: 1
```
"""

def date_fashion(you, date):
  if you >= 8 or date >= 8:
    print(2)
  elif you <= 2 or date <= 2:
    print(0)
  else:
    print(1)

date_fashion(5, 10)

date_fashion(5, 2)

date_fashion(5, 5)

"""### Q5. **Write ``double_char(s)`` (5 pts)**

Given a string, return a string where for every char in the original, there are two chars. 

Hint: You can access each character in a string through *for loop*:
```python
for char in s:     # element-based
```
Or
```python
for i in range(len(s)):    # index-based
```

Examples:
```python
In [1]: double_char('The')
Out[1]: 'TThhee'

In [2]: double_char('AAbb')
Out[2]: 'AAAAbbbb'

In [3]: double_char('Hi-There')
Out[3]: 'HHii--TThheerree'
```
"""

def double_char(s):
  set = list(s)
  output = []
  word = ''
  for i in range(len(set)):
    output.append(set[i])
    output.append(set[i])
  for i in range(len(output)):
    word += output[i]
  return word

double_char('The')

double_char('AAbb')

double_char('Hi-There')

"""## Part III (25 pts)

### Q1. **Write ``letterScore(letter, scorelist)`` (6 pts)**

``letterScore(letter, scorelist)`` accepts a single letter string called ``letter`` and a list, where each element in that list is itself a list of the form[character, value]. In those inner lists, ``characer`` is a single letter and ``value`` is a number associated with that letter (e.g., its Scrabble score). The ``letterScore`` function then returns a single number, namely the value associated with the given ``letter``. For example. you can cut and paste the following Scrabble score list into your code. 

```python
scrabbleScores = [ ["a", 1], ["b", 3], ["c", 3], ["d", 2], ["e", 1], 
                   ["f", 4], ["g", 2], ["h", 4], ["i", 1], ["j", 8], 
                   ["k", 5], ["l", 1], ["m", 3], ["n", 1], ["o", 1], 
                   ["p", 3], ["q", 10], ["r", 1], ["s", 1], ["t", 1], 
                   ["u", 1], ["v", 4], ["w", 4], ["x", 8], ["y", 4], 
                   ["z", 10] ]
```

Examples:
```python
In [1]: letterScore("c", scrabbleScores)
Out[1]: 3

In [2]: letterScore("a", scrabbleScores)
Out[2]: 1
```
"""

scrabbleScores = [ ["a", 1], ["b", 3], ["c", 3], ["d", 2], ["e", 1], 
                   ["f", 4], ["g", 2], ["h", 4], ["i", 1], ["j", 8], 
                   ["k", 5], ["l", 1], ["m", 3], ["n", 1], ["o", 1], 
                   ["p", 3], ["q", 10], ["r", 1], ["s", 1], ["t", 1], 
                   ["u", 1], ["v", 4], ["w", 4], ["x", 8], ["y", 4], 
                   ["z", 10] ]
def letterScore(letter, scorelist):
  for i in range(len(scorelist)):
    if letter == scorelist[i][0]:
      return scorelist[i][1]

letterScore("c", scrabbleScores)

letterScore("a", scrabbleScores)

"""### Q2. **Write ``wordScore(S, scorelist)`` (7 pts)**

``wordScore(S, scorelist)`` should accept a string `S` and a `scorelist` in the format describe in Q2, and should return the Scrabble score of that string. Again, ``wordScore`` should behave well if ``S`` contains letters not found in the ``scorelist``. However, you are allowed to crash badly if ``scoreList`` is in the wrong format (such as not being a list at all); that's because we haven't yet learned the way to protect against that kind of crash. 

Here are some examples:
```python
In [1]: wordScore('spam', scrabbleScores)
Out[1]: 8

In [2]: wordScore('wow', [['o', 10], ['w', 42]])
Out[2]: 94
```
"""

scrabbleScores = [ ["a", 1], ["b", 3], ["c", 3], ["d", 2], ["e", 1], 
                   ["f", 4], ["g", 2], ["h", 4], ["i", 1], ["j", 8], 
                   ["k", 5], ["l", 1], ["m", 3], ["n", 1], ["o", 1], 
                   ["p", 3], ["q", 10], ["r", 1], ["s", 1], ["t", 1], 
                   ["u", 1], ["v", 4], ["w", 4], ["x", 8], ["y", 4], 
                   ["z", 10] ]
def wordScore(s, scorelist):

  res = 0

  for i in range(len(scorelist)):

    for c in s:

      if c == scorelist[i][0]:

        res += scorelist[i][1]

  return res

wordScore('spam', scrabbleScores)

wordScore('wow', [['o', 10], ['w', 42]])

"""### Q3. **Write ``merge(l1, l2)`` (12 pts)**

``merge(l1, l2)`` takes two sorted lists of numbers (sorted from smaller to larger) as arguments and returns a new list that contains all of the elements in L1 and L2 in sorted order (smaller to larger). 

This function **should not do any kind of sorting on its own** - if the original lists are unsorted, the result if undefined.

```python
In [1]: merge([5, 10], [2, 12])
Out[1]: [2, 5, 10, 12]

In [2]: merge([2, 7], [6])
Out[2]: [2, 6, 7]

In [3]: merge([2, 7], [])
Out[3]: [2, 7]

In [4]: merge([], [42, 50])
Out[4]: [42, 50]

In [5]: merge([1, 2, 3], [2, 3, 4, 5])
Out[5]: [1, 2, 2, 3, 3, 4, 5]
```

Notice that when merging two lists like [5, 10] and [2, 12], the first element in the result[2, 5, 10, 12] is smaller of first element in the first list(5) and the first element in the second list(2), since those are the smallest element in their respective lists. Since 2 is less than 5, 2 "wins". So, we want 2 to be the first element in the list that that we return. Butm now we need to merge[5, 10] and the list[12] (which is the list [2, 12] but with the 2 removed since we've already decided to take it.)
"""

def merge(l1, l2):
  l3 = l1 + l2
  return sorted(l3)

merge([5, 10], [2, 12])

merge([2, 7], [6])

merge([2, 7], [])

merge([], [42, 50])

merge([1, 2, 3], [2, 3, 4, 5])