# -*- coding: utf-8 -*-
"""Copy of HW7 - Loops & Recursion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vrbQG3YbNRVtgBlK9B0RbAwm_EDsrICp

# Homework Assignment #7 (**50 points**)

This assignment will contain three parts, you are free to pick any questions you want to complete. (The additional points you earn will be treated as bonus points.): 
- Part I (**25 pts**): Review the syntax that I introduced in the class as well as Lab scripts, you can write in a function style or a program
- Part II (**25 pts**): Write a function to solve problems
- Part III (**25 pts**): Challenging problem, you can treat it as bonus problem, mainly for very advanced students.

## Part I (**25 pts**)

### Q1. **Moive Ticket (11 pts)**

Write a similar program as Homework Assignment #6 (Q5 at Part I), but with a ``while`` loop. 

A movie theater charges different ticket prices depending on a person's age. 
- If a person is under the age of 3, the ticket is free; 
- if they are between 3 and 12, the ticket is \$10; 
- and if they are over age 12, the ticket is \$15. 

Write a **loop** in which you ask their age, and then tell them the cost of their movie ticket. In other word, this program should able to calcualte the total cost based on user's input until user enter a ``quit``. 

In this question, you are asked to complete the following tasks:
- Ask the user what age she/he is. (Hint, using ``input()`` function) (**1 pt**)
- Use an ``if-elif-else`` chain to tell the cost of her/his movie ticket based on the age. (**1 pts**) 
- Use a conditional test in the ``while`` statement to stop the loop. (**2 pts**)
- Print the prices of single ticket and the total ticket cost. For example, if a user already enters two ages, the program should print the total cost of two tickets. (**4 pts**)
- Use a ``break`` statement to exist the loop when the user enters a ``quit`` values.(**1 pt**)



---


For example, suppose a user entering three ages: 38, 2, and 6. The problem should have the following workflow.
```
In [1]: Please start entering an age of people in your group(Enter 'quit' when you are finished):
        2
Out[1]:The ticket price for age of 2 is: $0
       The total price for your group is: $0

In [2]: Please start entering an age of people in your group(Enter 'quit' when you are finished):
        38
Out[2]:The ticket price for age of 38 is: $15
       The total price for your group is: $15

In [3]: Please start entering an age of people in your group(Enter 'quit' when you are finished):
        6
Out[3]:The ticket price for age of 6 is: $10
       The total price for your group is: $25

In [4]: Please start entering an age of people in your group(Enter 'quit' when you are finished):
        quit
Out[4]: Thanks for visiting our Movie Theater. The total price for your group is $25. 
```
"""

prompt = "How old are you?"
prompt += "\nEnter 'quit' when you are finished. "
total = 0

while True:
  age = input(prompt)
  if age == 'quit':
      break
  age = int(age)

  if age < 3:
    ticket = 0
    total += ticket
    print("The ticket price for age of " + str(age) + " is: $" + str(ticket))

  elif age < 13 and age >= 3:
    ticket = 10
    total += ticket
    print("The ticket price for age of " + str(age) + " is: $" + str(ticket))

  else:
    ticket = 15
    total += ticket
    print("The ticket price for age of " + str(age) + " is: $" + str(ticket))
      
print("Your total: $", total)

"""### Q2. **Deli (9 pts)**

Make a list called ``sandwich_orders`` and fill it with the names of various sandwiches. Then make an empty list called ``finished_sandwiches``. Loop through the list of sandwich orders and print a message for each order, such as ``I made your tuna sandwich``. As each sandwich is made, move it ot the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made. 

In this question, you are asked to complete the following tasks:
- Create a list called ``sandwich_orders``, which contains at least three sandwiches names (**1 pt**)
- Create a empty list called ``finished_sandwiches`` (**1 pt**)
- Use a ``while`` loop to pull sandwichs from the list of ``sandwich_orders`` and then add them to ``finished_sandwiches``. (**4 pts**)
- Print a message for each order (i.e., moving from ``sandwich_orders`` to ``finished_sandwiches``). (**1 pt**)
- After all the sandwiches have been made, print a message listing each sandwich that was made and stop the program. (**2 pts**)
"""

sandwich_orders = ["ruben", "PB&J", "tuna", "ham & swiss"]
finished_sandwiches = []

while sandwich_orders:
  work_sandwich = sandwich_orders.pop()
  print("Your " + work_sandwich + " sandwich is being made.")
  finished_sandwiches.append(work_sandwich)

for i in finished_sandwiches:
  print("I made your " + i + " sandwich")

"""### Q3. **Dream Vacation (5 pts)**

Write a program that polls users about their dream vacation. In this polling program, you need to pass through the loop prompts for the participant's name and response, and store the data in a dictionary. Finally, connect each response with a particular user. 

In this question, you are asked to complete the following tasks:
- Use ``while`` loop to create a loop prompts for the participant's name and response. The prompt is similar to *if you could visit one place in the world, where would you go?* (**3 pts**)

- Store the partcipant's name and response in a dictionary. (**1 pt**)
- Print the poll results by connecting each response with a particular user. (**1 pt**)
"""

user_responses = {}

while True:
  name = input("Please enter your name: ")
  location = input("If you could visit one place in the world where would you go? ")

  user_responses[name] = location
  more_responses = input("Is there another user response? yes/no ")

  if more_responses != 'yes':
        break

print("POLL RESULTS")
for name, location in user_responses.items():
    print(name.title() + " would like to visit " + location.title() + ".")

"""## Part II (**25 pts**)

### Q1. **Write ``centered_average(nums)`` (5 pts)**

Write a function called ``centered_average(nums)``, which takes a list of numbers ``nums`` and returns the "centered" average of a list of ints. In other words, we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the list is length 3 or more.

For example:

``` python
In [1]: centered_average([1, 2, 3, 4, 100])
Out[1]: 3

In [2]: centered_average([1, 1, 5, 5, 10, 8, 7])
Out[2]: 5

In [3]: centered_average([-10, -4, -2, -4, -2, 0])
Out[3]: 3

In [4]: centered_average([7, 7, 7])
Out[4]: 7

In [5]: centered_average([1000, 0, 1, 99])
Out[5]: 50
```
"""

def centered_average(nums):
  maximum = nums[0]
  minimum = nums[0]
  sum = 0
  for x in nums:
      maximum = max(maximum, x)
      minimum = min(minimum, x)
      sum += x
  result = (sum - maximum - minimum) / (len(nums) - 2)
  print(round(result))

centered_average([1, 2, 3, 4, 100])

centered_average([1, 1, 5, 5, 10, 8, 7])

centered_average([-10, -4, -2, -4, -2, 0])

centered_average([7, 7, 7])

centered_average([1000, 0, 1, 99])

"""### Q2. **Write ``lone_sum(a, b, c)`` (5 pts)**

Write a function called ``lone_sum(a, b, c)``, which takes 3 int values, ``a``,  ``b``  and ``c``, and returns their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.

For example:
```python
In [1]: lone_sum(1, 2, 3)
Out[1]: 6

In [2]: lone_sum(3, 2, 3)
Out[2]: 2

In [3]: lone_sum(3, 3, 3) 
Out[3]: 0

In [4]: lone_sum(2, 9, 3)
Out[4]: 14

In [5]: lone_sum(9, 2, 2)
Out[5]: 9

In [6]: lone_sum(2, 2, 9)
Out[6]: 9
```
"""

def lone_sum(a, b, c):

  if a == b & b == c:
    return 0

  elif a == b:
    return c
  
  elif b == c:
    return a
    
  elif a == c:
    return b

  else:
    return a + b + c

lone_sum(1, 2, 3)

lone_sum(3, 2, 3)

lone_sum(3, 3, 3)

lone_sum(2, 9, 3)

lone_sum(9, 2, 2)

lone_sum(2, 2, 9)

"""### Q3. **Write ``numToBinary(N)`` (5 pts)**

This part of the assignment motivates converting decimal numbers into binary form one bit at a time. Write a function called ``numToBinary(N)``, which takes an inter as input and returns a string. 

**Hints:**
- Since we don't want leading zeros, if the argument ``N`` is zero, it returns the empty string.
- This means that ``numToBinary(0)`` will be the empty string. This is both required and OK!
- If the argument ``N`` is odd, the function appends 1
- If the argument ``N`` is even (else), the function appends 0

For example:
``` python
In [1]: numToBinary(0)
Out[1]: ''

In [2]: numToBinary(1)
Out[2]: '1'

In [3]: numToBinary(4)
Out[3]: '100'

In [4]: numToBinary(10)
Out[4]: '1010'

In [5]: numToBinary(42)
Out[5]: '101010'

In [6]: numToBinary(100)
Out[6]: '1100100'
```
"""

def numToBinary(N):
    if N==0:          # <<<< THIS!
        return ''
    elif N%2 == 1:
        return numToBinary(N//2)+'1'
    else:
        return numToBinary(N//2)+'0'

numToBinary(0)

numToBinary(1)

numToBinary(10)

numToBinary(42)

numToBinary(100)

"""### Q4. **Write ``binaryToNum(S)`` (5 pts)**

Next, you'll tackle the more challenging task of converting from base 2 to base 10, again from right to left. We'll represent a base-2 number as a string of 0's and 1's (bits). Write a function called ``binaryToNum(S)``, which takes a string ``S`` as a input and returns the decimal number. 

**Hints:**
- Notice that this function is, again, handling only one "bit" (zero or one) at a time, right to left.
- Reversing the action of the prior function, if the argument is an empty string, the function returns 0. This is both required and OK!
- If the last digit of S is '1', the function adds the value 1 to the result.
- If the last digit of S is '0', the function adds the value 0 to the result. (Not strictly required, but OK.)

Examples:
```python
In [1]: binaryToNum("100")
Out[1]: 4

In [2]: binaryToNum("1011")
Out[1]: 11

In [3]: binaryToNum("00001011")
Out[1]: 11

In [4]: binaryToNum("")
Out[1]: 0

In [5]: binaryToNum("0")
Out[1]: 0

In [6]: binaryToNum("1100100")
Out[1]: 100

In [7]: binaryToNum("101010")
Out[1]: 42
```
"""

def binaryToNum(S):
  decimal = 0
  for digit in S:
    decimal = decimal*2 + int(digit)
  print(decimal)

binaryToNum("100")

binaryToNum("1011")

binaryToNum("")

binaryToNum("0")

binaryToNum("1100100")

binaryToNum("101010")

"""### Q5. **Turtle Arts (5 pts)**

Please use ``ColabTurtle`` library or ``ColabTurtlePlus`` library to design and draw a graph!

For a more detailed tutorial, please check [Lab8 - Turtle Arts](https://colab.research.google.com/drive/17bOImgg0uOGvGvk1DxXmoEAIFdyjCNOY?usp=sharing)!
"""

!pip install ColabTurtlePlus

from ColabTurtlePlus.Turtle import *

clearscreen()
speed(10)
bgcolor('black')
pensize(10)

def curve():
    for i in range(200):
  
        right(1)
        forward(1)
  
# Defining method to draw a full heart
def heart():
  
    fillcolor('hotpink')
  
    begin_fill()
  
    left(140)
    forward(113)
  
    curve()
    left(120)
  
    curve()
  
    forward(112)
  
    end_fill()
  
heart()

"""## Part III (**25 pts**)

### Q1. **Write ``sum67(nums)`` (5 pts)**

Write a function called ``sum67(nums)``, which returns the sum of the numbers in the list, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). In other words, ingore the numbers between 6 and 7. Return 0 for no numbers.

```python
In [1]: sum67([1, 2, 2])
Out[1]: 5

In [2]: sum67([1, 2, 2, 6, 99, 99, 7])
Out[2]: 5
"""

def sum67(nums):
    badnumber = True
    total = 0

    for i in nums:
        if i == 6:
            badnumber = False

        if badnumber:
            total += i
            continue

        if i == 7:
            badnumber = True

    return total

sum67([1, 2, 2])

sum67([1, 2, 2, 6, 99, 99, 7])

"""### Q2. **Write ``increment(S)`` (5 pts)**

Write a function called ``increment(S)``, which accepts an **8-character** string ``S`` of 0's and 1's, and return the next largest number, in binary, **still using 8 characters** 


**Hints**:
- Notice that increment('11111111') should wrap around to the all-zeros string. This can be a special case (if), or you can use slicing if you prefer.
- You don't need recursion here!
- Instead, use both of the conversion functions you wrote earlier in this assignment! Here is pseudocode:
-- Let n = the numeric value of the argument ``S``
-- Let next = n + 1 (this is the increment!)
-- Convert next back into a binary string with your other converter!
-- Give a name, say binary_next, to that newly created binary string...
-- At this point, you're almost finished!

For example:
```python
In [1]: increment('00000010')
Out[1]: '00000011'

In [2]: increment('00001111')
Out[2]: '00010000'

In [3]: increment('00101001')
Out[3]: '00101010'

In [4]: increment('11111111')
Out[4]: '00000000'
```
"""



"""### Q3. **Write ``count(S, n)`` (5 pts)**

Write a function called ``count(S, n)``, which accepts an **8-character binary string** ``S`` as its argument and then counts ``n`` times upward from ``S``, printing as it goes. 

**Hints**
- This means your function will print a total of ``n+1`` binary strings.
- You should use the Python ``print`` command, since nothing is being returned.We're only printing to the screen.
- You do need recursion here. What are the base case and the recursive case?

Here are some examples:
```python
In [1]: count("00000000", 4)
out[1]:
00000000
00000001
00000010
00000011
00000100

In [2]: count("11111110", 5)
out[2]:
11111110
11111111
00000000
00000001
00000010
00000011
```

### Q4. **Write ``numToTernary(N)`` and ``tenaryToNum(S)`` (10 pts, 5 pts for each)**

Write the following two functions:
- ``numToTernary(N)``, which should return a ternary string representing the value of the argument ``N`` (just as numToBinary does)
- ``ternaryToNum(S)``, which should return the value equivalent to the argument string ``S``, when ``S`` is interpreted in ternary.

For this part of the assignment, we extend these representational ideas from base 2 (binary) to base 3 (ternary). Just as binary numbers use the two digits ``0`` and ``1``, ternary numbers use the digits ``0``, ``1``, and ``2``. Consecutive columns in the ternary numbers represent consecutive powers of three. For example, the ternary number 

``1120``

when evaluated from right to left, evaluates as 1 twenty-seven, 1 nine, 2 threes, and 0 ones. Or, to summarize, it is ``1*27 + 1*9 + 2*3 + 0*1 == 42``.
In a comment or triple-quoted string, explain what the ternary representation is for the value 59, and why it is so.

Here are some examples:
```python
In [1]: numToTernary(42)
Out[1]: '1120'

In [2]: numToTernary(4242)
Out[2]: '12211010'

In [3]: ternaryToNum('1120')
Out[3]: 42

In [4]: ternaryToNum('12211010')
Out[4]: 4242
```
"""

