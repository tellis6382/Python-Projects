# -*- coding: utf-8 -*-
"""HW3 - Data Structure & Function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F-uZuLrrJXovbQ7PFu3LDhnujtX6dDcn

# Homework Assignment #3 (50 points)

**Write a function that solve the problem and display the answer. You can test your function with the test cases**

##Q1. **Write ``sq(x)`` (4pts)**

The function ``sq(x)`` should accept a numeric argument named x. Then, ``sq`` should return the suqare of its argument. 

For example:
```Python
In [1]: sq(2)
out[1]: 4

In [2]: sq(5)
Out[2]: 25
```
"""

def sq(x):
  return x * x

sq(2)

sq(5)

"""## Q2. **Write ``interp(low, hi, fraction)`` (6 pts)**

The function ``interp(low, hi, fraction)`` accpets three numbers as input arguments; ``low``, ``hi``, and ``fraction``, and by definition, ``interp(low, hi, fraction)`` should return the floating-point value that is ``fraction`` of thw way between ``low`` and ``hi``. 

As an example, consider ``interp(1, 9, 0.25)``, which means:
*    You started at location 1
*    You will finish at location 9
*    YOu have tranversed one-quarter, 0.25, of the journey so far

The ``interp`` function should return your location now, one-quarter of the way from ``1`` to ``9``.
*    Do you see whay the correct result for ``interp (1, 9, 0.25)`` is ***3*** ï¼Ÿ

Take a moment of convience yourself - or ask & chat about it!

Once you see why the correct result of ``interp(1, 9, 0.25)`` is ***3***, then try to describe the same process using the variable names:


*  ``low``, the "start point""
*  ``hi``, the "end point"
* ``fracion``, the fraction traversed so far...

Here are more examples to clariy how ``interp`` works:

```Python
In [1]: interp(1.0, 9.0, 0.25)   # A quarter (0.25) of the way from 1.0 to 9.0
Out[1]: 3.0

In [2]: interp(1.0, 3.0, 0.25)   # A quarter of the way from 1.0 to 3.0
Out[2]: 1.5

In [3]: interp(2, 12, 0.22)      # 22% of the way from 2 to 12
Out[3]: 4.2
```

***Note: Please don't overthink about this problem. All end point is supposed to at least equal or bigger than start point, and the fraction traversed is always between 0 - 1.***


"""

def interp(low, hi, fraction):
  hi = float(hi)
  low = float(low)
  interp=((hi-low)*float(fraction))+low
  return interp


interp(1.0, 9.0, 0.25)

interp(1.0, 3.0, 0.25)

interp(2, 12, 0.22)

"""## Q3. **Write ``checkends(s)`` (6 pts)**

Write a function ``checkends(s)``, which takes in a string ``s`` and return ``True`` if the first character in s is the same as the last character in s. It returns ``False`` otherwise. The ``checkends`` function does not have to work on the empty string (the string '').

These examples will help explain ``checkends`` -- read them over now, and be sure to try them once you have a first draft of your function. Notice that the fourth, final example below is the *string of one space character*, which is different from empty string, which contains no characters:

```Python
In [1]: checkends('no match')
Out[1]: False

In [2]: checkends('hah! a match')
Out[2]: True

In [3]: checkends('q')
Out[3]: True

In [4]: checkends(' ')
Out[4]: True
```


Hint: For this function, you could use an ``if`` and ``else`` construction.
```Python
if ________ == _________:
  return True
else:
  return False
```
"""

def checkends(s): 
  s = s.lower()
  x = s.split()
  
  if s == ' ':
    return ' '
  if x[0][0] == x[-1][-1]:
    return True
  else:
    return False

checkends("no match")

checkends("hah! a match")

checkends('q')

checkends(' ')

"""##Q4. **Write ``has42(d)`` (6 pts)**

Write a function ``has42(d)``, which takes in dictionary ``d`` and returns ``True`` if the key 42 is in the dictionary. It returns ``False`` otherwise.

***How to check if a key is ``in`` a dictionary ``d``***? (I introduce this in the class & you can check your lab3 - data structure scripts)

Python has an ``in`` operator (we have discussed it in the class) to check this. Here is an example:
```Python
if 42 in d:   # check if the key 42 is in d
```

**Hint**: A greate start to this function is a copy-and-paste of ``checkends``!
- From there, change the test using the code above: ``if 42 in d``
- Be sure to change the name ``has42`` and the name of the input argument ``d``
- Those are pretty much the only differences (if you have function description, please adjust it)

Examples
```Python
In [1]: d = {5 : 'five', 42: 'forty-two'}
In [2]: has42(d)
Out[2]: True

In [3]: small_d = {5 :'five'}
In [4]: has42(small_d)  # Ok for the argument name to be different
Out[4]: False
```
"""

def has42(d):
  if 42 in d:
    return True
  else:
    return False

has42(d = {5 : 'five', 42 : 'forty-two'})

"""## Q5. **Write hasKey(K, d) (6 pts)**

Write a function ``hasKey(k, d)``, which takes in a possible key ``k`` and a dictionary ``d``. Then, ``hasKey`` should return ``True`` if the key ``k`` is in the dictionary. It returns ``False`` otherwise.

**Hint**: A great start to this function is a copy-and-paste of ``has42``!

Examples:
```Python
In [1]: d = {5 : 'five', 42: 'forty-two'}
In [2]: hasKey(42, d)
Out[2]: True

In [3]: hasKey(787, d)
Out[3]: False

In [4]: small_d = {5 :'five'}
In [5]: hasKey(42, small_d) 
Out[5]: False

In [6]: hasKey(5, small_d)
Out[6]: True
"""

def hasKey(k, d):
  if k in d:
    return True
  else:
    return False

d = {5 : 'five', 42: 'forty-two'}
hasKey(42, d)

hasKey(787, d)

small_d = {5 : 'five'}
hasKey(42, small_d)

hasKey(5, small_d)

"""## Q6. **Write ``explode(s)`` (10 pts)**
Write a function ``explode(s)``, which should take a string ``s`` and return a list of the characters (each of which is a string of length 1) in that string. 

**Hint**: Think about for loop and list. We can loop through the string and append each character to the list. 

Examples:
``` Pthon
In [1]: explode("spam")
Out[1]: ['s', 'p', 'a', 'm']

In [1]: explode("")
Out[2]: []
```
"""

def explode(s):
  word = list(s)
  print(word)

explode("spam")
explode("")

"""## Q7. **DNA - RNA transcription (12 pts)**

In an incredible molecular feat called *transcription*, your cells create molecules of messenger RNA that mirror the sequence of nucleotides in your DNA. The RNA is then used to create proteins that do the work of the cell.

Write a function ``transcribe(S)``, which should take an argument that is a string ``S``, which will have DNA nucleotides (capital letter As, Cs, Gs, and Ts).

There may be other characters, too, though they should be ignored by your transcribe function by simply disappearing from the return value. These might be spaces or other characters that are not really DNA nucleotides.

``transcribe`` should return the messenger RNA that would be produced from that string ``S``. The correct return value simply uses replacement:

- As in the argument become Us in the result.
- Cs in the argument become Gs in the result.
- Gs in the argument become Cs in the result.
- Ts in the argument become As in the result.
- any other input characters should disappear from the result altogether

You can use dictionary to conversion
``conversion = {'A':'U', 'C':'G', 'G':'C', 'T':'A'}

**Hint**: Consider the for loop and append each transcription to a result string.

Here are some examples of ``transcribe``:
``` Python
In [1]: transcribe('ACGT TGCA') #space should be removed
Out[1]: 'UGCAACGU'

In [2]: transcribe('GATTACA')
Out[2]: 'CUAAUGU'

In [3]: transcribe('itm251')  
Out[3]: ''     # note that other characters disappear
```
"""

def transcribe(s):

  conversion = {'A': 'U', 'C': 'G', 'G':'C', 'T':'A'}

  result = ''

  for i in s:

    if i in conversion.keys():

      result += conversion[i]
  return result

transcribe('ACGT TGCA')

transcribe('GATTACA')

transcribe('itm251')

"""## Bonus Problems (5 pts)

Please rewrite the ``interp`` in Q2, and try your function when ``fraction`` is less than zero or greater than one. In these cases, it's extrapolating rather than interpolating. But we'll stick with the name ``interp`` anyway!

Additional two more examples to try:

```Python
In [1]: interp(24, 42, 0.0)   # 0% of the way from 24 to 42
Out[1]: 24.0

In [2]: interp(102, 117, -4.0)  #-400% of the way from 102 to 117 (whoa!)
Out[2]: 42.0
```
"""

#Same function written works with fraction when it is less than 0 or greater than 1
def interp(low, hi, fraction):
  hi = float(hi)
  low = float(low)
  interp=((hi-low)*float(fraction))+low
  return interp


interp(24, 42, 0.0)

interp(102, 117, -4.0)